(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{336:function(a,e,o){"use strict";o.r(e);var t=o(8),s=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),e("p",[a._v("本文由ChatGPT生成，请自行甄别。")])]),a._v(" "),e("p",[a._v("在CMake中，"),e("code",[a._v("find_package()")]),a._v(" 指令中的 "),e("code",[a._v("CONFIG")]),a._v(" 关键字用于指示 CMake 查找 "),e("strong",[a._v("基于配置文件的包")]),a._v("（Config-mode package），而不是使用模块模式（Module-mode package）。这个关键字让 CMake 寻找某个库的专用配置文件来获取其信息，比如 Boost 配置文件的路径。")]),a._v(" "),e("h3",{attrs:{id:"find-package-的两种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#find-package-的两种模式"}},[a._v("#")]),a._v(" "),e("code",[a._v("find_package()")]),a._v(" 的两种模式：")]),a._v(" "),e("ol",[e("li",[e("p",[e("strong",[a._v("Module 模式（Module Mode）")]),a._v("：")]),a._v(" "),e("ul",[e("li",[a._v("CMake 自带了很多 FindXXX.cmake 模块文件，用于查找常见的第三方库。这些模块会尝试自动检测系统中是否安装了指定的库，并提供相应的库路径和头文件路径。")]),a._v(" "),e("li",[a._v("比如 "),e("code",[a._v("find_package(Boost REQUIRED)")]),a._v(" 可能会调用 CMake 自带的 "),e("code",[a._v("FindBoost.cmake")]),a._v(" 模块文件，它根据系统上的Boost安装情况自动查找Boost。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Config 模式（Config Mode）")]),a._v("：")]),a._v(" "),e("ul",[e("li",[a._v("在 Config 模式中，CMake 直接查找由库自身提供的配置文件，通常是一个 "),e("code",[a._v("<PackageName>Config.cmake")]),a._v(" 文件或者 "),e("code",[a._v("<PackageName>-config.cmake")]),a._v(" 文件。这个配置文件通常包含库的路径、版本信息、编译选项等详细信息。")]),a._v(" "),e("li",[a._v("使用 "),e("code",[a._v("CONFIG")]),a._v(" 关键字时，CMake会直接在你提供的路径中查找库的专用配置文件，而不是使用CMake自带的查找模块。例如，Boost的 CMake 配置文件通常位于 "),e("code",[a._v("lib/cmake/Boost-*")]),a._v(" 目录中。")])])])]),a._v(" "),e("h3",{attrs:{id:"在你的例子中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在你的例子中"}},[a._v("#")]),a._v(" 在你的例子中：")]),a._v(" "),e("div",{staticClass:"language-cmake line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查找 Boost 库")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("find_package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Boost REQUIRED CONFIG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("ul",[e("li",[e("code",[a._v("CONFIG")]),a._v(" 表示你告诉 CMake 使用 Boost 提供的 CMake 配置文件，而不是依赖 CMake 自带的 "),e("code",[a._v("FindBoost.cmake")]),a._v(" 模块。")]),a._v(" "),e("li",[a._v("CMake 将会在你指定的 "),e("code",[a._v("Boost_DIR")]),a._v(" 路径下查找类似 "),e("code",[a._v("BoostConfig.cmake")]),a._v(" 或 "),e("code",[a._v("Boost-1.86.0Config.cmake")]),a._v(" 的文件。")]),a._v(" "),e("li",[a._v("通过这种方式，CMake 可以更精确地获取 Boost 的版本信息、目标定义、依赖关系等，尤其是在你手动构建和安装 Boost 的情况下，使用 Config 模式会更可靠。")])]),a._v(" "),e("h3",{attrs:{id:"当使用-config-时"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当使用-config-时"}},[a._v("#")]),a._v(" 当使用 "),e("code",[a._v("CONFIG")]),a._v(" 时：")]),a._v(" "),e("ul",[e("li",[a._v("CMake 查找的是由库开发者提供的配置文件，这些文件通常包含详细的库信息和依赖。")]),a._v(" "),e("li",[a._v("配置文件模式对于现代的 CMake 项目更为常见，因为它提供了更加灵活且精准的库信息。")])]),a._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结：")]),a._v(" "),e("p",[e("code",[a._v("CONFIG")]),a._v(" 关键字告诉 CMake 查找由 Boost 自己生成的 CMake 配置文件（通常是安装时生成的 "),e("code",[a._v("BoostConfig.cmake")]),a._v("），而不是使用 CMake 自带的查找模块。这样可以确保在使用 Boost 的安装路径时获得正确的配置。")])])}),[],!1,null,null,null);e.default=s.exports}}]);