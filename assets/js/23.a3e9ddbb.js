(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{341:function(t,s,_){"use strict";_.r(s);var a=_(8),v=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("本文由ChatGPT生成，请自行甄别。")])]),t._v(" "),s("p",[t._v("在 CMake 中，使用 "),s("code",[t._v("Boost::system")]),t._v(" 这种 "),s("strong",[t._v("目标名（target name）")]),t._v(" 而不是直接写库文件名（例如 "),s("code",[t._v("libboost_system.a")]),t._v(" 或 "),s("code",[t._v("libboost_system.so")]),t._v("），是因为目标名具有更高的抽象层次，能够简化项目的管理，增强移植性，并提供更多功能。具体的原因和它们的使用时机如下：")]),t._v(" "),s("h3",{attrs:{id:"_1-使用-boost-system-的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-boost-system-的优势"}},[t._v("#")]),t._v(" 1. "),s("strong",[t._v("使用 "),s("code",[t._v("Boost::system")]),t._v(" 的优势：")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("更便捷的依赖管理")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("当你在 "),s("code",[t._v("target_link_libraries()")]),t._v(" 中使用 "),s("code",[t._v("Boost::system")]),t._v(" 这样的目标名时，CMake 自动处理与这个目标相关的所有信息，包括库文件路径、库的类型（静态或动态）、编译选项、库的依赖关系等。")]),t._v(" "),s("li",[t._v("你不需要手动指定实际的库文件名（如 "),s("code",[t._v(".a")]),t._v("、"),s("code",[t._v(".so")]),t._v(" 或 "),s("code",[t._v(".lib")]),t._v(" 文件），CMake 会根据目标名自动找到正确的库文件并链接。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("跨平台兼容性")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("直接使用库文件名可能在不同平台上造成问题。例如，Windows 使用 "),s("code",[t._v(".lib")]),t._v(" 或 "),s("code",[t._v(".dll")]),t._v(" 文件，而 Linux 或 macOS 使用 "),s("code",[t._v(".a")]),t._v(" 或 "),s("code",[t._v(".so")]),t._v(" 文件。如果你手动指定库文件名，则需要为每个平台设置不同的逻辑，增加了复杂性。")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("Boost::system")]),t._v(" 这样的目标名，CMake 能自动根据当前平台找到合适的库文件，无需你手动处理不同平台的差异。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("自动处理库的静态或动态链接")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("当你使用目标名（如 "),s("code",[t._v("Boost::system")]),t._v("）时，CMake 会自动根据库的配置（静态或动态）找到正确的文件并链接。如果使用静态库，它会找到 "),s("code",[t._v(".a")]),t._v(" 文件，如果使用动态库，它会找到 "),s("code",[t._v(".so")]),t._v(" 或 "),s("code",[t._v(".dll")]),t._v(" 文件。")]),t._v(" "),s("li",[t._v("你无需关心库的具体类型，CMake 会根据配置（可能在 "),s("code",[t._v("find_package(Boost ...)")]),t._v(" 时确定）自动选择。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("简化依赖管理")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("某些库（例如 Boost）可能依赖其他库。例如，"),s("code",[t._v("Boost::filesystem")]),t._v(" 依赖于 "),s("code",[t._v("Boost::system")]),t._v("。当你使用 "),s("code",[t._v("Boost::filesystem")]),t._v(" 作为目标名时，CMake 会自动将 "),s("code",[t._v("Boost::system")]),t._v(" 也链接进来，而不需要你手动处理这些依赖。")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-使用具体库文件名的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用具体库文件名的场景"}},[t._v("#")]),t._v(" 2. "),s("strong",[t._v("使用具体库文件名的场景：")])]),t._v(" "),s("p",[t._v("虽然使用目标名是现代 CMake 的推荐方式，但在某些特殊场景下，直接使用库文件名仍然是必要的或更合适的做法：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("手动构建或安装的库")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("如果你使用了一个没有提供 CMake 配置文件的库（比如它没有提供 "),s("code",[t._v("PackageConfig.cmake")]),t._v(" 文件），你可能不得不手动指定库文件的路径和名字。")]),t._v(" "),s("li",[t._v("在这种情况下，你可以使用 "),s("code",[t._v("target_link_directories()")]),t._v(" 或 "),s("code",[t._v("target_link_libraries()")]),t._v(" 来直接指定库文件名，例如："),s("div",{staticClass:"language-cmake line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cmake"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_directories")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("PROJECT_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PRIVATE")]),t._v(" /path/to/libs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("PROJECT_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PRIVATE")]),t._v(" libcustomlibrary.a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("库目标未定义或缺失")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("如果某个第三方库没有通过 CMake 定义目标（如 "),s("code",[t._v("Boost::system")]),t._v(" 这样的名字），你就需要手动指定具体的库文件名。例如，某些老旧或未经过现代化处理的库，可能只提供库文件而没有相应的 CMake 配置目标。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("使用系统库")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("在某些情况下，你可能希望链接一些系统库，而这些库没有定义 CMake 目标。例如，在 Linux 上你想链接 "),s("code",[t._v("pthread")]),t._v("，可以直接指定："),s("div",{staticClass:"language-cmake line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cmake"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("PROJECT_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("PRIVATE")]),t._v(" pthread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-cmake-目标-vs-库文件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-cmake-目标-vs-库文件名"}},[t._v("#")]),t._v(" 3. "),s("strong",[t._v("CMake 目标 vs. 库文件名：")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("strong",[t._v("使用目标名（如 "),s("code",[t._v("Boost::system")]),t._v("）")])]),t._v(" "),s("th",[s("strong",[t._v("使用具体库文件名")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("自动处理依赖、编译选项、平台差异等。")]),t._v(" "),s("td",[t._v("需要手动处理库的路径和依赖。")])]),t._v(" "),s("tr",[s("td",[t._v("跨平台兼容，CMake 自动找到正确库文件。")]),t._v(" "),s("td",[t._v("需要手动区分平台，指定正确的库文件。")])]),t._v(" "),s("tr",[s("td",[t._v("对于现代库（如 Boost）更易用、更灵活。")]),t._v(" "),s("td",[t._v("对于老旧库、手动构建库时使用。")])]),t._v(" "),s("tr",[s("td",[t._v("通过 "),s("code",[t._v("find_package()")]),t._v(" 导入，自动获取目标名。")]),t._v(" "),s("td",[t._v("直接指定库文件时使用（无 "),s("code",[t._v("find_package()")]),t._v(" 支持）。")])])])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("使用目标名（如 "),s("code",[t._v("Boost::system")]),t._v("）")]),t._v("：这种方式更简洁、更灵活，适用于使用 CMake 现代构建流程的库。它能自动处理库的路径、平台差异、依赖关系等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("使用具体库文件名（如 "),s("code",[t._v("libboost_system.a")]),t._v("）")]),t._v("：这种方式在没有可用 CMake 配置文件的情况下有用，需要手动处理路径和依赖。")])])]),t._v(" "),s("p",[t._v("通常来说，现代 CMake 项目中推荐使用目标名，特别是当你使用 "),s("code",[t._v("find_package()")]),t._v(" 查找到的库时。")])])}),[],!1,null,null,null);s.default=v.exports}}]);